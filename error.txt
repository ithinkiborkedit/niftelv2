>>> func identity[T](x: T) -> T{
... return x
... }
000: 'f' (102)
001: 'u' (117)
002: 'n' (110)
003: 'c' (99)
004: ' ' (32)
005: 'i' (105)
006: 'd' (100)
007: 'e' (101)
008: 'n' (110)
009: 't' (116)
010: 'i' (105)
011: 't' (116)
012: 'y' (121)
013: '[' (91)
014: 'T' (84)
015: ']' (93)
016: '(' (40)
017: 'x' (120)
018: ':' (58)
019: ' ' (32)
020: 'T' (84)
021: ')' (41)
022: ' ' (32)
023: '-' (45)
024: '>' (62)
025: ' ' (32)
026: 'T' (84)
027: '{' (123)
028: '\n' (10)
029: 'r' (114)
030: 'e' (101)
031: 't' (116)
032: 'u' (117)
033: 'r' (114)
034: 'n' (110)
035: ' ' (32)
036: 'x' (120)
037: '\n' (10)
038: '}' (125)
039: '\n' (10)
[ADVANCE] Current: func (type=func, line=1, lexeme="func")[STATMENT] At: <nil> Current: func (type=func, line=1, lexeme="func")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="identity")[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="x")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: -> (type=->, line=1, lexeme="->")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: return (type=return, line=2, lexeme="return")[BLOCK] Next token: type=return lexeme="return" line=2
[STATMENT] At: <nil> Current: return (type=return, line=2, lexeme="return")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="x")[ADVANCE] Current: } (type=}, line=3, lexeme="}")[RETURN] After parsing expr, current=} (type=}, lexeme="}")
[BLOCK] Next token: type=} lexeme="}" line=3
[ADVANCE] Current: EOF (type=EOF, line=4, lexeme="")Runtime Error unkown type 'T' for function 'identity': unknown type 'T'