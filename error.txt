DEBUG ENV TYPES after registration:[
"tuple" "func" "float" "list" "struct" "int" "string" "bool" "null" ]
Niftel REPL v0
>>> DEBUG ENV TYPES after registration:[
"string" "struct" "func" "int" "float" "null" "bool" "tuple" "list" ]
[ADVANCE] Current: struct (type=struct, line=1, lexeme="struct")[STATMENT] At: <nil> Current: struct (type=struct, line=1, lexeme="struct")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Box")[AFTER SKIP NEW LINES] struct body: token IDENTIFIER lexem='Box' line='1'
[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="value")[AFTER OPENING '{' ] struct body: token IDENTIFIER lexem='value' line='2'
[Trying to check for 
 after '{' ] struct body: token IDENTIFIER lexem='value' line='2'
[PARSERLOOP] struct body: type=1  lexem='value' line='2'
[ADVANCE] Current: : (type=:, line=2, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="T")parseTypeExpr: current token = {IDENTIFIER T <nil> 2 12}
[ADVANCE] Current: } (type=}, line=3, lexeme="}")[ADVANCE] Current: EOF (type=EOF, line=4, lexeme="")[INFO] REGISTERED struct type: 'Box'
[ADVANCE] Current: func (type=func, line=1, lexeme="func")[STATMENT] At: <nil> Current: func (type=func, line=1, lexeme="func")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="unbox")[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="b")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Box")parseTypeExpr: current token = {IDENTIFIER Box <nil> 1 20}
[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")parseTypeExpr: current token = {IDENTIFIER T <nil> 1 22}
[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: -> (type=->, line=1, lexeme="->")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")parseTypeExpr: current token = {IDENTIFIER T <nil> 1 29}
[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: return (type=return, line=2, lexeme="return")[BLOCK] Next token: type=return lexeme="return" line=2
[STATMENT] At: <nil> Current: return (type=return, line=2, lexeme="return")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="b")[ADVANCE] Current: . (type=., line=2, lexeme=".")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="value")[ADVANCE] Current: } (type=}, line=3, lexeme="}")[RETURN] After parsing expr, current=} (type=}, lexeme="}")
[BLOCK] Next token: type=} lexeme="}" line=3
[ADVANCE] Current: EOF (type=EOF, line=4, lexeme="")[DEBUG GENERICS: VISIT FUNCSTMT]: []niftokens.Token{niftokens.Token{Type:1, Lexeme:"T", Data:interface {}(nil), Line:1, Column:12}}[DEBUG GENERICS: VISIT FUNCSTMT]: TYP PARAM[0]: {"IDENTIFIER" "T" <nil> '\x01' '\f'} LEXEME:"T"Defining function: unbox
[ADVANCE] Current: var (type=var, line=1, lexeme="var")[STATMENT] At: <nil> Current: var (type=var, line=1, lexeme="var")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="x")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Box")parseTypeExpr: current token = {IDENTIFIER Box <nil> 1 10}
[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="int")parseTypeExpr: current token = {IDENTIFIER int <nil> 1 14}
[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: = (type==, line=1, lexeme="=")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Box")[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="int")parseTypeExpr: current token = {IDENTIFIER int <nil> 1 25}
[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: { (type={, line=1, lexeme="{")
parser error: Type arguments only allowed in function calls e.g(foo[T](args...)