=== RUN   TestParser_Parse
advance() return l.current=0, rune='\n' (U+000a)
scanToken() return type=
, Lexeme="\n", current=1, start=0advance() return l.current=1, rune='\t' (U+0009)
advance() return l.current=2, rune='\t' (U+0009)
advance() return l.current=3, rune='v' (U+0076)
advance() return l.current=4, rune='a' (U+0061)
advance() return l.current=5, rune='r' (U+0072)
scanToken() return type=var, Lexeme="var", current=6, start=3advance() return l.current=6, rune=' ' (U+0020)
advance() return l.current=7, rune='x' (U+0078)
scanToken() return type=IDENTIFIER, Lexeme="x", current=8, start=7advance() return l.current=8, rune=':' (U+003a)
scanToken() return type=:, Lexeme=":", current=9, start=8advance() return l.current=9, rune=' ' (U+0020)
advance() return l.current=10, rune='i' (U+0069)
advance() return l.current=11, rune='n' (U+006e)
advance() return l.current=12, rune='t' (U+0074)
scanToken() return type=IDENTIFIER, Lexeme="int", current=13, start=10advance() return l.current=13, rune=' ' (U+0020)
advance() return l.current=14, rune='=' (U+003d)
scanToken() return type==, Lexeme="=", current=15, start=14advance() return l.current=15, rune=' ' (U+0020)
advance() return l.current=16, rune='4' (U+0034)
advance() return l.current=17, rune='2' (U+0032)
scanToken() return type=NUMBER, Lexeme="42", current=18, start=16advance() return l.current=18, rune='\n' (U+000a)
scanToken() return type=
, Lexeme="\n", current=19, start=18advance() return l.current=19, rune='\t' (U+0009)
advance() return l.current=20, rune='\t' (U+0009)
advance() return l.current=21, rune='v' (U+0076)
advance() return l.current=22, rune='a' (U+0061)
advance() return l.current=23, rune='r' (U+0072)
scanToken() return type=var, Lexeme="var", current=24, start=21advance() return l.current=24, rune=' ' (U+0020)
advance() return l.current=25, rune='y' (U+0079)
scanToken() return type=IDENTIFIER, Lexeme="y", current=26, start=25advance() return l.current=26, rune=':' (U+003a)
scanToken() return type=:, Lexeme=":", current=27, start=26advance() return l.current=27, rune=' ' (U+0020)
advance() return l.current=28, rune='i' (U+0069)
advance() return l.current=29, rune='n' (U+006e)
advance() return l.current=30, rune='t' (U+0074)
scanToken() return type=IDENTIFIER, Lexeme="int", current=31, start=28advance() return l.current=31, rune=' ' (U+0020)
advance() return l.current=32, rune='=' (U+003d)
scanToken() return type==, Lexeme="=", current=33, start=32advance() return l.current=33, rune=' ' (U+0020)
advance() return l.current=34, rune='x' (U+0078)
scanToken() return type=IDENTIFIER, Lexeme="x", current=35, start=34advance() return l.current=35, rune=' ' (U+0020)
advance() return l.current=36, rune='+' (U+002b)
scanToken() return type=+, Lexeme="+", current=37, start=36advance() return l.current=37, rune=' ' (U+0020)
advance() return l.current=38, rune='1' (U+0031)
scanToken() return type=NUMBER, Lexeme="1", current=39, start=38advance() return l.current=39, rune='\n' (U+000a)
scanToken() return type=
, Lexeme="\n", current=40, start=39advance() return l.current=40, rune='\t' (U+0009)
advance() return l.current=41, rune='\t' (U+0009)
advance() return l.current=42, rune='p' (U+0070)
advance() return l.current=43, rune='r' (U+0072)
advance() return l.current=44, rune='i' (U+0069)
advance() return l.current=45, rune='n' (U+006e)
advance() return l.current=46, rune='t' (U+0074)
scanToken() return type=print, Lexeme="print", current=47, start=42advance() return l.current=47, rune='(' (U+0028)
scanToken() return type=(, Lexeme="(", current=48, start=47advance() return l.current=48, rune='x' (U+0078)
scanToken() return type=IDENTIFIER, Lexeme="x", current=49, start=48advance() return l.current=49, rune=')' (U+0029)
scanToken() return type=), Lexeme=")", current=50, start=49advance() return l.current=50, rune='\n' (U+000a)
scanToken() return type=
, Lexeme="\n", current=51, start=50advance() return l.current=51, rune='\t' (U+0009)
scanToken() return type=EOF, Lexeme="", current=52, start=52--- PASS: TestParser_Parse (0.00s)
PASS
ok  	github.com/ithinkiborkedit/niftelv2.git/internal/parser	(cached)
