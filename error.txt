DEBUG ENV TYPES after registration:[
"null" "tuple" "string" "list" "struct" "int" "bool" "func" "float" ]
[ADVANCE] Current: struct (type=struct, line=1, lexeme="struct")[STATMENT] At: <nil> Current: struct (type=struct, line=1, lexeme="struct")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Person")[AFTER SKIP NEW LINES] struct body: token IDENTIFIER lexem='Person' line='1'
[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="name")[AFTER OPENING '{' ] struct body: token IDENTIFIER lexem='name' line='2'
[Trying to check for 
 after '{' ] struct body: token IDENTIFIER lexem='name' line='2'
[PARSERLOOP] struct body: type=1  lexem='name' line='2'
[ADVANCE] Current: : (type=:, line=2, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="string")parseTypeExpr: current token = {IDENTIFIER string <nil> 2 16}
[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=3, lexeme="age")[PARSERLOOP] struct body: type=1  lexem='age' line='3'
[ADVANCE] Current: : (type=:, line=3, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=3, lexeme="int")parseTypeExpr: current token = {IDENTIFIER int <nil> 3 12}
[ADVANCE] Current: func (type=func, line=5, lexeme="func")[PARSERLOOP] struct body: type=53  lexem='func' line='5'
[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=5, lexeme="greet")[ADVANCE] Current: ( (type=(, line=5, lexeme="(")[ADVANCE] Current: ) (type=), line=5, lexeme=")")[ADVANCE] Current: -> (type=->, line=5, lexeme="->")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=5, lexeme="string")parseTypeExpr: current token = {IDENTIFIER string <nil> 5 26}
[ADVANCE] Current: { (type={, line=5, lexeme="{")[ADVANCE] Current: return (type=return, line=6, lexeme="return")[BLOCK] Next token: type=return lexeme="return" line=6
[STATMENT] At: <nil> Current: return (type=return, line=6, lexeme="return")[ADVANCE] Current: STRING (type=STRING, line=6, lexeme="\"hi\"")[ADVANCE] Current: } (type=}, line=7, lexeme="}")[RETURN] After parsing expr, current=} (type=}, lexeme="}")
[BLOCK] Next token: type=} lexeme="}" line=7
[ADVANCE] Current: } (type=}, line=8, lexeme="}")[ADVANCE] Current: EOF (type=EOF, line=9, lexeme="")[INFO] REGISTERED struct type: 'Person'
[ADVANCE] Current: var (type=var, line=1, lexeme="var")[STATMENT] At: <nil> Current: var (type=var, line=1, lexeme="var")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="p")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Person")parseTypeExpr: current token = {IDENTIFIER Person <nil> 1 13}
[ADVANCE] Current: = (type==, line=1, lexeme="=")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="Person")[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="name")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: STRING (type=STRING, line=1, lexeme="\"Jim\"")[ADVANCE] Current: , (type=,, line=1, lexeme=",")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="age")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: NUMBER (type=NUMBER, line=1, lexeme="23")[ADVANCE] Current: } (type=}, line=1, lexeme="}")[ADVANCE] Current: EOF (type=EOF, line=3, lexeme="")[ADVANCE] Current: print (type=print, line=1, lexeme="print")[STATMENT] At: <nil> Current: print (type=print, line=1, lexeme="print")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="p")[ADVANCE] Current: . (type=., line=1, lexeme=".")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="greet")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: ) (type=), line=1, lexeme=")")DEBUG CALL callee=&nifast.GetExpr{Object:(*nifast.VariableExpr)(0x14000108300), Name:niftokens.Token{Type:1, Lexeme:"greet", Data:interface {}(nil), Line:1, Column:13}}, typeArg=[]*nifast.TypeExpr(nil), arguments=[]nifast.Expr(nil)[ADVANCE] Current: EOF (type=EOF, line=1, lexeme="")runtime error: struct field 'greet' not found