DEBUG ENV TYPES after registration:[
"string" "list" "struct" "float" "tuple" "bool" "null" "func" "int" ]
[ADVANCE] Current: func (type=func, line=1, lexeme="func")[STATMENT] At: <nil> Current: func (type=func, line=1, lexeme="func")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="swap")[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="a")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: , (type=,, line=1, lexeme=",")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="b")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: -> (type=->, line=1, lexeme="->")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: , (type=,, line=1, lexeme=",")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: return (type=return, line=2, lexeme="return")[BLOCK] Next token: type=return lexeme="return" line=2
[STATMENT] At: <nil> Current: return (type=return, line=2, lexeme="return")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="b")[ADVANCE] Current: , (type=,, line=2, lexeme=",")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="a")[ADVANCE] Current: } (type=}, line=3, lexeme="}")[RETURN] After parsing expr, current=} (type=}, lexeme="}")
[BLOCK] Next token: type=} lexeme="}" line=3
[ADVANCE] Current: EOF (type=EOF, line=4, lexeme="")[DEBUG GENERICS: VISIT FUNCSTMT]: []niftokens.Token{niftokens.Token{Type:1, Lexeme:"T", Data:interface {}(nil), Line:1, Column:11}}[DEBUG GENERICS: VISIT FUNCSTMT]: TYP PARAM[0]: {"IDENTIFIER" "T" <nil> '\x01' '\v'} LEXEME:"T"Defining function: swap
[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="swap")[STATMENT] At: <nil> Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="swap")[ADVANCE] Current: [ (type=[, line=1, lexeme="[")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="T")[ADVANCE] Current: ] (type=], line=1, lexeme="]")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: NUMBER (type=NUMBER, line=1, lexeme="1")[ADVANCE] Current: , (type=,, line=1, lexeme=",")[ADVANCE] Current: NUMBER (type=NUMBER, line=1, lexeme="2")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: EOF (type=EOF, line=1, lexeme="")DEBUG CALL callee=&nifast.VariableExpr{Name:niftokens.Token{Type:22, Lexeme:"]", Data:interface {}(nil), Line:1, Column:7}}, typeArg=[]*nifast.TypeExpr(nil), arguments=[]nifast.Expr{(*nifast.LiteralExpr)(0x14000122200), (*nifast.LiteralExpr)(0x14000122240)}runtime error: undefined variable ]