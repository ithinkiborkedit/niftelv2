Niftel REPL v0
>>> func greet(hi: string) -> string {
... return hi
... }
000: 'f' (102)
001: 'u' (117)
002: 'n' (110)
003: 'c' (99)
004: ' ' (32)
005: 'g' (103)
006: 'r' (114)
007: 'e' (101)
008: 'e' (101)
009: 't' (116)
010: '(' (40)
011: 'h' (104)
012: 'i' (105)
013: ':' (58)
014: ' ' (32)
015: 's' (115)
016: 't' (116)
017: 'r' (114)
018: 'i' (105)
019: 'n' (110)
020: 'g' (103)
021: ')' (41)
022: ' ' (32)
023: '-' (45)
024: '>' (62)
025: ' ' (32)
026: 's' (115)
027: 't' (116)
028: 'r' (114)
029: 'i' (105)
030: 'n' (110)
031: 'g' (103)
032: ' ' (32)
033: '{' (123)
034: '\n' (10)
035: 'r' (114)
036: 'e' (101)
037: 't' (116)
038: 'u' (117)
039: 'r' (114)
040: 'n' (110)
041: ' ' (32)
042: 'h' (104)
043: 'i' (105)
044: '\n' (10)
045: '}' (125)
046: '\n' (10)
[ADVANCE] Current: func (type=func, line=1, lexeme="func")[STATMENT] At: <nil> Current: func (type=func, line=1, lexeme="func")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="greet")[ADVANCE] Current: ( (type=(, line=1, lexeme="(")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="hi")[ADVANCE] Current: : (type=:, line=1, lexeme=":")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="string")[ADVANCE] Current: ) (type=), line=1, lexeme=")")[ADVANCE] Current: -> (type=->, line=1, lexeme="->")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=1, lexeme="string")[ADVANCE] Current: { (type={, line=1, lexeme="{")[ADVANCE] Current: return (type=return, line=2, lexeme="return")[BLOCK] Next token: type=return lexeme="return" line=2
[STATMENT] At: <nil> Current: return (type=return, line=2, lexeme="return")[ADVANCE] Current: IDENTIFIER (type=IDENTIFIER, line=2, lexeme="hi")[ADVANCE] Current: } (type=}, line=3, lexeme="}")Parser error: unexpected token '}' as line 3